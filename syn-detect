#!/usr/bin/env python3
import sys
import getopt

import socket
from socket import AF_INET, SOCK_STREAM, SOCK_DGRAM

# sudo apt install python3-psutil
import psutil

from os.path import basename
from time import sleep

AF_INET6 = getattr(socket, 'AF_INET6', object())
proto_map = {
    (AF_INET, SOCK_STREAM): 'tcp',
    (AF_INET6, SOCK_STREAM): 'tcp6',
    (AF_INET, SOCK_DGRAM): 'udp',
    (AF_INET6, SOCK_DGRAM): 'udp6',
}

class Host:
    def __init__(self, net):
        self.net=net
        self.count=0

def usage():
    print('{} [-he] [-t <thresh>] [-l <loop_every_seconds>]'.format(basename(sys.argv[0])), file=sys.stderr)

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "het:l:", ["help", "established", "thresh=", "loop="])
    except getopt.GetoptError as err:
        print(err, file=sys.stderr)
        usage()
        sys.exit(2)
    
    what = 'SYN_RECV'
    thresh = 10
    loop = 0
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "-e":
            what = 'ESTABLISHED'
        elif o == "-t":
            thresh = int(a)
        elif o == "-l":
            loop = int(a)
        else:
            assert False, "unhandled option"

    if loop>0:
        print('STARTED', flush=True)

    while True:
        #print('CHECKING', flush=True)
        hosts = {}
        nets = {}

        for c in psutil.net_connections(kind='inet'):

            if proto_map[(c.family, c.type)] != 'tcp':
                continue

            if not (c.raddr and c.status == what):
                continue

            net = '.'.join(c.raddr.ip.split('.')[:3])
            #print(c.raddr.ip, net)
            if not c.raddr.ip in hosts:
                hosts[c.raddr.ip]=Host(net)
            hosts[c.raddr.ip].count+=1

        # Gather hosts into nets
        for k, v in hosts.items():
            if (v.count<thresh):
                # Did not meet thresh. Add to a /24 net
                if not v.net in nets:
                    nets[v.net]=0
                nets[v.net]+=v.count

        # Print net hits
        for k, n in nets.items():
            if (n>=thresh):
                # This net got > thresh hits in total, print net
                # Note: fail2ban cannot ban a net
                # https://github.com/fail2ban/fail2ban/issues/2559
                print('NET: {} {}>={}'.format(k+'/24', n, thresh), flush=True)
            else:
                print('net: {} {}<{}'.format(k+'/24', n, thresh), flush=True)

        # Print host hits
        for k, h in hosts.items():
            if (h.count>=thresh):
                # This host got > thresh hits in total, ban this host
                print('HOST: {} {}>={} ({})'.format(k, h.count, thresh, h.net+'/24'), flush=True)
            elif h.net in nets and nets[h.net]>=thresh:
                # This host is a member of a net that got > thresh hits in total, ban it
                print('HOST: {} {} ({} {}>={})'.format(k, h.count, h.net+'/24', nets[h.net], thresh), flush=True)
#           else:
#               print('HOST: {} {}>={} ({})'.format(k, h.count, thresh, h.net+'/24'), flush=True)

        if loop == 0:
            break;

        sleep(loop)

if __name__ == '__main__':
    main()

# vim: expandtab
